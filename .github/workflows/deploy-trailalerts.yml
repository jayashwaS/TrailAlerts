name: Deploy TrailAlerts 
description: Deploy TrailAlerts infrastructure and Lambda functions

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy-trailalerts.yml'
      - 'lambdas/TrailAlertsCloudTrailAnalyzer/**'
      - 'lambdas/TrailAlertsEventProcessor/**'
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy-trailalerts.yml'
      - 'lambdas/TrailAlertsCloudTrailAnalyzer/**'
      - 'lambdas/TrailAlertsEventProcessor/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deploy-trailalerts:
    runs-on: ubuntu-latest
    defaults:
        run:
          shell: bash
    
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
    - uses: actions/checkout@v4

    - name: Login to AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActions-TrailAlerts-DeployRole
        role-session-name: TrailAlertsGitHubActionsSession
        role-duration-seconds: 900

    - uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: terraform
      run: terraform fmt -check

    - name: Plan
      id: plan
      working-directory: terraform
      run: terraform plan -no-color -out=tfplan
      continue-on-error: true

    - name: Post Plan to PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
            const output = `#### Terraform Plan üìù\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

    - name: Generate Summary
      working-directory: terraform
      run: |
          echo "## Terraform Plan Results" >> $GITHUB_STEP_SUMMARY
          echo "Run by: @${{ github.actor }} | Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.plan.outcome }}" == "success" ]; then
            echo "‚úÖ Plan Status: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Plan Status: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Show Terraform Plan</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```hcl' >> $GITHUB_STEP_SUMMARY
          terraform show -no-color tfplan >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: terraform
      run: terraform apply -auto-approve -input=false


